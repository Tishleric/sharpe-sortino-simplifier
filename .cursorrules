# Sharpe & Sortino Ratio Calculator - Project Intelligence

## Purpose & Workflow
The application follows a strict three-step workflow: Upload → Configure → Results. All interaction flows through this process, with each step dependent on the previous one's completion.

## Architecture Insights
- The main state management happens in the Index.tsx component, with presentation components for each step
- All financial calculations are contained in calculationUtils.ts
- File processing and data extraction are handled in fileUtils.ts
- The UI follows shadcn/ui patterns with Tailwind CSS for styling

## Data Flow Patterns
- File uploads are processed client-side via XLSX.js
- Data format is detected automatically but can be overridden by the user
- Component state transitions manage the application workflow
- Toast notifications provide feedback for errors and successful operations

## Mathematical Understanding
- Sharpe Ratio = (Mean Return - Risk Free Rate) / Standard Deviation × √(Trading Periods)
- Sortino Ratio = (Mean Return - Risk Free Rate) / Downside Deviation × √(Trading Periods)
- Risk-free rate conversion uses compound interest formula: (1 + annual rate)^(1/periods) - 1
- Standard deviation uses n-1 denominator (sample standard deviation)
- Downside deviation only considers returns below the target (or risk-free rate)

## Data Format Handling
- Percentage: Values like 5 are treated as 5% (divided by 100 for calculations)
- Decimal: Values like 0.05 are treated as 5% (used directly)
- Absolute: Dollar values, used directly for calculations
- Auto-detection examines value ranges to determine the most likely format

## User Preferences
- Clear, educational content is important - users likely need to understand what the ratios mean
- Mathematical transparency is essential - financial professionals need to trust the calculation methodology
- Performance for large datasets matters - some users may upload extensive historical data

## Known Challenges
- Excel date detection requires special handling due to Excel's unique date system
- Format detection can be ambiguous when values fall in overlapping ranges
- Absolute dollar returns need portfolio value for meaningful ratio calculation

## Common Operations
- Adding features should maintain the three-step workflow
- Any new calculations should include educational content explaining methodology
- UI components should follow shadcn/ui patterns for consistency

# Sharpe-Sortino Calculator Project Rules

## Calculation Precision Handling
- Always display at least 4 decimal places for financial metrics like standard deviation and downside deviation
- Small values (< 0.01) require proper precision to avoid showing as 0.00
- When in doubt, use more decimal places for financial metrics rather than fewer

## Excel Export Best Practices
- Always quote sheet names with spaces using single quotes: `'Sheet Name'!A1` not `Sheet Name!A1`
- Double any single quotes inside sheet names: `'Sheet''s Name'!A1`
- Use cell references (G1, G2) in formulas rather than hardcoded values for flexibility
- Ensure all parameter cells have valid default values (e.g., 0 instead of empty/undefined)
- Create live formula cells using `{ t: 'n', f: 'formula' }` not just string representations
- Provide raw data, calculation breakdown, and methodology explanation

## Histogram Binning Logic
- Never allow bins to overlap zero—split into strictly positive and negative bins
- Ensure bins containing zero are either entirely positive or entirely negative
- For financial data, color-code bins based on sign (red for negative, green for positive)
- Proportionally allocate bins based on data range

## Excel Objects and Formulas
- Charts, cells, and formulas: https://github.com/SheetJS/sheetjs#cell-objects
- To create a formula cell: `ws[addr] = { t:'n', f:'SUM(A1:A5)' };`
- To set column width: `ws['!cols'] = [{ wch: 10 }, { wch: 20 }];`
- To freeze panes: `ws['!freeze'] = { xSplit: 0, ySplit: 1 };` (freeze 1st row)

## Data Type and Format Handling
- Absolute returns (dollar values) need fractional conversion for ratio calculations
- Percentage returns need division by 100 for calculations
- Decimal returns can be used directly
- Always verify units match before calculations (e.g., risk-free rate format matching return format)
- Validate parameter types to avoid TypeScript comparison errors (number vs string) 